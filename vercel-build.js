const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Starting Vercel build process...');

// Set NODE_ENV to production for the build
process.env.NODE_ENV = 'production';
console.log(`üîß NODE_ENV set to: ${process.env.NODE_ENV}`);

try {
  // Install dependencies with legacy peer deps to avoid conflicts
  console.log('üì¶ Installing dependencies...');
  execSync('npm install --legacy-peer-deps', { stdio: 'inherit' });

  // Ensure the server directory exists
  const serverDist = path.join(__dirname, 'server', 'dist');
  if (!fs.existsSync(serverDist)) {
    console.log('üìÇ Creating server/dist directory...');
    fs.mkdirSync(serverDist, { recursive: true });
  }

  // Build the frontend
  console.log('üî® Building frontend...');
  execSync('npm run build', { stdio: 'inherit' });

  // Build the server
  console.log('üîß Building server...');
  execSync('npm run build:server', { stdio: 'inherit' });

  // Create a serverless function wrapper for Vercel
  console.log('‚ö° Creating serverless function...');
  const serverlessWrapper = `
// This file is auto-generated by vercel-build.js
const server = require('./server/dist/server');

module.exports = async (req, res) => {
  try {
    // Set CORS headers
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
    res.setHeader(
      'Access-Control-Allow-Headers',
      'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
    );

    // Handle preflight requests
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }

    // Pass the request to the server
    return server.default(req, res);
  } catch (error) {
    console.error('‚ùå Server error:', error);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};
`;

  // Write the serverless wrapper
  fs.writeFileSync(path.join(serverDist, 'serverless.js'), serverlessWrapper);
  console.log('‚úÖ Build completed successfully!');
} catch (error) {
  console.error('‚ùå Build failed with error:', error);
  process.exit(1);
}

console.log('Vercel build completed successfully!');
